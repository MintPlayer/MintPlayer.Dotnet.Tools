//#nullable enable
////-----------------------------------------------------------------------------------//
//// <auto-generated>                                                                  //
////    This code was generated from source generator.                                 //
////                                                                                   //
////    Manual changes to this file may cause unexpected behavior in your application. //
////    Manual changes to this file will be overwritten if the code is regenerated.    //
//// </auto-generated>                                                                 //
////-----------------------------------------------------------------------------------//

//namespace MapperDebugging;

//public static class MapperExtensions
//{
//    public static TDest? ConvertProperty<TSource, TDest>(TSource? source, int? sourceState = null, int? destState = null)
//    {
//        if (source is null)
//            return default;

//        object? result;

//        switch ((typeof(TSource), typeof(TDest)))
//        {
//            case (global::System.Type sourceType, global::System.Type destType) when sourceType == typeof(string) && destType == typeof(int?):
//                result = global::Conversions.StringToNullableInt((string)(object)source);
//                break;
//            case (global::System.Type sourceType, global::System.Type destType) when sourceType == typeof(int?) && destType == typeof(string):
//                result = global::Conversions.NullableIntToString((int?)(object)source);
//                break;
//            case (global::System.Type sourceType, global::System.Type destType) when sourceType == typeof(string) && destType == typeof(double):
//                result = global::Conversions.StringToDouble((string)(object)source);
//                break;
//            case (global::System.Type sourceType, global::System.Type destType) when sourceType == typeof(double) && destType == typeof(string):
//                result = global::Conversions.DoubleToString((double)(object)source);
//                break;
//            case (global::System.Type sourceType, global::System.Type destType) when sourceType == typeof(string) && destType == typeof(string) && sourceState == 0 && destState == 1:
//                result = global::Conversions.StringToBase64((string)(object)source, (global::EPasswordState)sourceState, (global::EPasswordState)destState);
//                break;
//            case (global::System.Type sourceType, global::System.Type destType) when sourceType == typeof(string) && destType == typeof(string) && sourceState == 1 && destState == 0:
//                result = global::Conversions.Base64ToString((string)(object)source, (global::EPasswordState)sourceState, (global::EPasswordState)destState);
//                break;
//            default:
//                throw new NotSupportedException($"Conversion from {typeof(TSource)} to {typeof(TDest)} is not supported.");
//        }

//        return (TDest?)result;
//    }
//    public static void MapToPerson(this global::PersonDto input, global::Person output)
//    {
//        if ((input is { } inValue) && (output is { }))
//        {
//            output.Age = input.Leeftijd;
//            output.Address = input.Adres.MapToAddress();
//            output.ContactInfos = input.Contactgegevens == null ? null : input.Contactgegevens.Select(x => x.MapToContactInfo()).ToList();
//            output.Notes = input.Notities == null ? null : input.Notities.ToList();
//            output.Weight = ConvertProperty<string, double>(input.Gewicht);
//            output.Password = ConvertProperty<string, string>(input.Password, 0, 1);
//        }
//    }
//    public static global::Person MapToPerson(this global::PersonDto input)
//    {
//        if (input is null) return default;

//        return new global::Person()
//        {
//            Age = input.Leeftijd,
//            Address = input.Adres.MapToAddress(),
//            ContactInfos = input.Contactgegevens == null ? null : input.Contactgegevens.Select(x => x.MapToContactInfo()).ToList(),
//            Notes = input.Notities == null ? null : input.Notities.ToList(),
//            Weight = ConvertProperty<string, double>(input.Gewicht),
//            Password = ConvertProperty<string, string>(input.Password, 0, 1),
//        };
//    }
//    public static global::System.Collections.Generic.IEnumerable<global::Person> MapToPerson(this global::System.Collections.Generic.IEnumerable<global::PersonDto> input)
//    {
//        return input.Select(x => x.MapToPerson());
//    }
//    public static void MapToPersonDto(this global::Person input, global::PersonDto output)
//    {
//        if ((input is { } inValue) && (output is { }))
//        {
//            output.Leeftijd = input.Age;
//            output.Adres = input.Address.MapToAddressDto();
//            output.Contactgegevens = input.ContactInfos == null ? null : input.ContactInfos.Select(x => x.MapToContactInfoDto()).ToList();
//            output.Notities = input.Notes == null ? null : input.Notes.ToList();
//            output.Gewicht = ConvertProperty<double, string>(input.Weight);
//            output.Password = ConvertProperty<string, string>(input.Password, 1, 0);
//        }
//    }
//    public static global::PersonDto MapToPersonDto(this global::Person input)
//    {
//        if (input is null) return default;

//        return new global::PersonDto()
//        {
//            Leeftijd = input.Age,
//            Adres = input.Address.MapToAddressDto(),
//            Contactgegevens = input.ContactInfos == null ? null : input.ContactInfos.Select(x => x.MapToContactInfoDto()).ToList(),
//            Notities = input.Notes == null ? null : input.Notes.ToList(),
//            Gewicht = ConvertProperty<double, string>(input.Weight),
//            Password = ConvertProperty<string, string>(input.Password, 1, 0),
//        };
//    }
//    public static global::System.Collections.Generic.IEnumerable<global::PersonDto> MapToPersonDto(this global::System.Collections.Generic.IEnumerable<global::Person> input)
//    {
//        return input.Select(x => x.MapToPersonDto());
//    }
//    public static void MapToContactInfo(this global::ContactInfoDto input, global::ContactInfo output)
//    {
//        if ((input is { } inValue) && (output is { }))
//        {
//            output.Type = input.Soort;
//            output.Value = input.Waarde;
//        }
//    }
//    public static global::ContactInfo MapToContactInfo(this global::ContactInfoDto input)
//    {
//        if (input is null) return default;

//        return new global::ContactInfo()
//        {
//            Type = input.Soort,
//            Value = input.Waarde,
//        };
//    }
//    public static global::System.Collections.Generic.IEnumerable<global::ContactInfo> MapToContactInfo(this global::System.Collections.Generic.IEnumerable<global::ContactInfoDto> input)
//    {
//        return input.Select(x => x.MapToContactInfo());
//    }
//    public static void MapToContactInfoDto(this global::ContactInfo input, global::ContactInfoDto output)
//    {
//        if ((input is { } inValue) && (output is { }))
//        {
//            output.Soort = input.Type;
//            output.Waarde = input.Value;
//        }
//    }
//    public static global::ContactInfoDto MapToContactInfoDto(this global::ContactInfo input)
//    {
//        if (input is null) return default;

//        return new global::ContactInfoDto()
//        {
//            Soort = input.Type,
//            Waarde = input.Value,
//        };
//    }
//    public static global::System.Collections.Generic.IEnumerable<global::ContactInfoDto> MapToContactInfoDto(this global::System.Collections.Generic.IEnumerable<global::ContactInfo> input)
//    {
//        return input.Select(x => x.MapToContactInfoDto());
//    }
//    public static void MapToAddress(this global::AddressDto input, global::Address output)
//    {
//        if ((input is { } inValue) && (output is { }))
//        {
//            output.Street = input.Straatnaam;
//            output.City = input.Stad;
//        }
//    }
//    public static global::Address MapToAddress(this global::AddressDto input)
//    {
//        if (input is null) return default;

//        return new global::Address()
//        {
//            Street = input.Straatnaam,
//            City = input.Stad,
//        };
//    }
//    public static global::System.Collections.Generic.IEnumerable<global::Address> MapToAddress(this global::System.Collections.Generic.IEnumerable<global::AddressDto> input)
//    {
//        return input.Select(x => x.MapToAddress());
//    }
//    public static void MapToAddressDto(this global::Address input, global::AddressDto output)
//    {
//        if ((input is { } inValue) && (output is { }))
//        {
//            output.Straatnaam = input.Street;
//            output.Stad = input.City;
//        }
//    }
//    public static global::AddressDto MapToAddressDto(this global::Address input)
//    {
//        if (input is null) return default;

//        return new global::AddressDto()
//        {
//            Straatnaam = input.Street,
//            Stad = input.City,
//        };
//    }
//    public static global::System.Collections.Generic.IEnumerable<global::AddressDto> MapToAddressDto(this global::System.Collections.Generic.IEnumerable<global::Address> input)
//    {
//        return input.Select(x => x.MapToAddressDto());
//    }
//}

//public interface IMapper
//{
//    TDest? Map<TSource, TDest>(TSource? source);
//    void Map<TSource, TDest>(TSource? source, TDest destination);
//}

//public class Mapper : IMapper
//{
//    public TDest? Map<TSource, TDest>(TSource? source)
//    {
//        if (source is null)
//            return default;

//        object? result;

//        switch (source)
//        {
//            case global::Person sourceValue:
//                switch (typeof(TDest))
//                {
//                    case global::System.Type destType when destType == typeof(global::PersonDto):
//                        result = global::MapperDebugging.MapperExtensions.MapToPersonDto(sourceValue);
//                        break;
//                    default:
//                        throw new NotSupportedException($"Conversion from {typeof(TSource)} to {typeof(TDest)} is not supported.");
//                }
//                break;
//            case global::ContactInfo sourceValue:
//                switch (typeof(TDest))
//                {
//                    case global::System.Type destType when destType == typeof(global::ContactInfoDto):
//                        result = global::MapperDebugging.MapperExtensions.MapToContactInfoDto(sourceValue);
//                        break;
//                    default:
//                        throw new NotSupportedException($"Conversion from {typeof(TSource)} to {typeof(TDest)} is not supported.");
//                }
//                break;
//            case global::Address sourceValue:
//                switch (typeof(TDest))
//                {
//                    case global::System.Type destType when destType == typeof(global::AddressDto):
//                        result = global::MapperDebugging.MapperExtensions.MapToAddressDto(sourceValue);
//                        break;
//                    default:
//                        throw new NotSupportedException($"Conversion from {typeof(TSource)} to {typeof(TDest)} is not supported.");
//                }
//                break;
//            case global::PersonDto sourceValue:
//                switch (typeof(TDest))
//                {
//                    case global::System.Type destType when destType == typeof(global::Person):
//                        result = global::MapperDebugging.MapperExtensions.MapToPerson(sourceValue);
//                        break;
//                    default:
//                        throw new NotSupportedException($"Conversion from {typeof(TSource)} to {typeof(TDest)} is not supported.");
//                }
//                break;
//            case global::ContactInfoDto sourceValue:
//                switch (typeof(TDest))
//                {
//                    case global::System.Type destType when destType == typeof(global::ContactInfo):
//                        result = global::MapperDebugging.MapperExtensions.MapToContactInfo(sourceValue);
//                        break;
//                    default:
//                        throw new NotSupportedException($"Conversion from {typeof(TSource)} to {typeof(TDest)} is not supported.");
//                }
//                break;
//            case global::AddressDto sourceValue:
//                switch (typeof(TDest))
//                {
//                    case global::System.Type destType when destType == typeof(global::Address):
//                        result = global::MapperDebugging.MapperExtensions.MapToAddress(sourceValue);
//                        break;
//                    default:
//                        throw new NotSupportedException($"Conversion from {typeof(TSource)} to {typeof(TDest)} is not supported.");
//                }
//                break;
//            default:
//                throw new NotSupportedException($"Conversion from {typeof(TSource)} to {typeof(TDest)} is not supported.");
//        }

//        return (TDest?)result;
//    }

//    public void Map<TSource, TDest>(TSource? source, TDest destination)
//    {
//        if (source is null) return;

//        switch (source)
//        {
//            case global::Person sourceValue:
//                switch (destination)
//                {
//                    case global::PersonDto dest:
//                        global::MapperDebugging.MapperExtensions.MapToPersonDto(sourceValue, dest);
//                        break;
//                    default:
//                        throw new NotSupportedException($"Conversion from {typeof(TSource)} to {typeof(TDest)} is not supported.");
//                }
//                break;
//            case global::ContactInfo sourceValue:
//                switch (destination)
//                {
//                    case global::ContactInfoDto dest:
//                        global::MapperDebugging.MapperExtensions.MapToContactInfoDto(sourceValue, dest);
//                        break;
//                    default:
//                        throw new NotSupportedException($"Conversion from {typeof(TSource)} to {typeof(TDest)} is not supported.");
//                }
//                break;
//            case global::Address sourceValue:
//                switch (destination)
//                {
//                    case global::AddressDto dest:
//                        global::MapperDebugging.MapperExtensions.MapToAddressDto(sourceValue, dest);
//                        break;
//                    default:
//                        throw new NotSupportedException($"Conversion from {typeof(TSource)} to {typeof(TDest)} is not supported.");
//                }
//                break;
//            case global::PersonDto sourceValue:
//                switch (destination)
//                {
//                    case global::Person dest:
//                        global::MapperDebugging.MapperExtensions.MapToPerson(sourceValue, dest);
//                        break;
//                    default:
//                        throw new NotSupportedException($"Conversion from {typeof(TSource)} to {typeof(TDest)} is not supported.");
//                }
//                break;
//            case global::ContactInfoDto sourceValue:
//                switch (destination)
//                {
//                    case global::ContactInfo dest:
//                        global::MapperDebugging.MapperExtensions.MapToContactInfo(sourceValue, dest);
//                        break;
//                    default:
//                        throw new NotSupportedException($"Conversion from {typeof(TSource)} to {typeof(TDest)} is not supported.");
//                }
//                break;
//            case global::AddressDto sourceValue:
//                switch (destination)
//                {
//                    case global::Address dest:
//                        global::MapperDebugging.MapperExtensions.MapToAddress(sourceValue, dest);
//                        break;
//                    default:
//                        throw new NotSupportedException($"Conversion from {typeof(TSource)} to {typeof(TDest)} is not supported.");
//                }
//                break;
//            default:
//                throw new NotSupportedException($"Conversion from {typeof(TSource)} to {typeof(TDest)} is not supported.");
//        }
//    }
//}

