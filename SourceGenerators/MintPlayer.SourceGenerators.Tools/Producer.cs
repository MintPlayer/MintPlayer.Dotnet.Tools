using Microsoft.CodeAnalysis;
using Microsoft.CodeAnalysis.Text;
using System.CodeDom.Compiler;
using System.Diagnostics;
using System.Text;

namespace MintPlayer.SourceGenerators.Tools;

public abstract class Producer
{
    protected Producer(string rootNamespace, string filename)
    {
        RootNamespace = rootNamespace;
        Filename = filename;
    }

    public const string Header = """
        //-----------------------------------------------------------------------------------//
        // <auto-generated>                                                                  //
        //    This code was generated from source generator.                                 //
        //                                                                                   //
        //    Manual changes to this file may cause unexpected behavior in your application. //
        //    Manual changes to this file will be overwritten if the code is regenerated.    //
        // </auto-generated>                                                                 //
        //-----------------------------------------------------------------------------------//
        """;

    public string RootNamespace { get; }
    public string Filename { get; }

    protected abstract void ProduceSource(IndentedTextWriter writer, CancellationToken cancellationToken);

    public void Produce(SourceProductionContext context)
    {
        context.CancellationToken.ThrowIfCancellationRequested();
        if (string.IsNullOrEmpty(Filename)) return;

        using var textWriter = new StringWriter();
        using var writer = new IndentedTextWriter(textWriter);

        try
        {
            ProduceSource(writer, context.CancellationToken);

            var code = textWriter.ToString();
            if (!string.IsNullOrEmpty(code))
                context.AddSource(Filename, SourceText.From(code, Encoding.UTF8));

            if (Filename == "Markup2Descriptions.g.cs") Debugger.Break();
        }
        catch (System.Exception)
        {
        }
    }
}